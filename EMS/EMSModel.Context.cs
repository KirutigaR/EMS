//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EMS
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EMSEntities : DbContext
    {
        public EMSEntities()
            : base("name=EMSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Holiday_List> Holiday_List { get; set; }
        public virtual DbSet<Leave_type> Leave_type { get; set; }
        public virtual DbSet<Leavebalance_sheet> Leavebalance_sheet { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<Project_role> Project_role { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<Timesheet> Timesheets { get; set; }
        public virtual DbSet<User_role> User_role { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Client_type> Client_type { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Incometax> Incometaxes { get; set; }
        public virtual DbSet<Salary_Structure> Salary_Structure { get; set; }
        public virtual DbSet<Payslip> Payslips { get; set; }
        public virtual DbSet<EMS_Leave_Balance_Temp> EMS_Leave_Balance_Temp { get; set; }
        public virtual DbSet<Asset_type> Asset_type { get; set; }
        public virtual DbSet<Employee_Asset> Employee_Asset { get; set; }
        public virtual DbSet<Status> Status { get; set; }
        public virtual DbSet<Leave> Leaves { get; set; }
        public virtual DbSet<Asset_Temp_Table> Asset_Temp_Table { get; set; }
        public virtual DbSet<Asset> Assets { get; set; }
    
        public virtual int UpdateLeaveBalance()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateLeaveBalance");
        }
    
        public virtual ObjectResult<string> availableemployee(Nullable<int> projectid, Nullable<int> useractive)
        {
            var projectidParameter = projectid.HasValue ?
                new ObjectParameter("projectid", projectid) :
                new ObjectParameter("projectid", typeof(int));
    
            var useractiveParameter = useractive.HasValue ?
                new ObjectParameter("useractive", useractive) :
                new ObjectParameter("useractive", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("availableemployee", projectidParameter, useractiveParameter);
        }
    
        public virtual int MoveToAssetTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("MoveToAssetTable");
        }
    
        [DbFunction("EMSEntities", "SplitString")]
        public virtual IQueryable<string> SplitString(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[EMSEntities].[SplitString](@Input, @Character)", inputParameter, characterParameter);
        }
    
        public virtual int UpdateAssetStatus(string assetIds, string status, Nullable<System.DateTime> assignedDate, Nullable<int> employee_id)
        {
            var assetIdsParameter = assetIds != null ?
                new ObjectParameter("AssetIds", assetIds) :
                new ObjectParameter("AssetIds", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var assignedDateParameter = assignedDate.HasValue ?
                new ObjectParameter("AssignedDate", assignedDate) :
                new ObjectParameter("AssignedDate", typeof(System.DateTime));
    
            var employee_idParameter = employee_id.HasValue ?
                new ObjectParameter("Employee_id", employee_id) :
                new ObjectParameter("Employee_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAssetStatus", assetIdsParameter, statusParameter, assignedDateParameter, employee_idParameter);
        }
    }
}
